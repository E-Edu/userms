openapi: 3.0.1
info:
  title: User Microservice
  version: v1
servers:
  - url: https://user.e-edu.the-morpheus.de
  - url: http://localhost:80

tags:
  - name: user
    description: User Microservice
paths:
  /user:
    post:
      tags:
        - user
      summary: Creates a new user
      description: Notice that Passwords should be stored by being hashed with BCrypt.
      operationId: create_user
      security:
        - JWT: [write]
        - ServiceToken: [write]
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
        - name: X-ServiceToken
          in: header
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: hans.peter.lustig@gmail.com
                password:
                  type: string
                  example: IchMagEinh√∂rner1234
                first_name:
                  type: string
                  example: Hans-Peter
                last_name:
                  type: string
                  example: Lustig
                teacher_token:
                  type: string
              required:
                - email
                - passwordHash
                - first_name
                - last_name
      responses:
        201:
          description: After processing this request a email will be dispatched to the users email address, containing a link for verifying their account structured in the following way **https://DOMAIN.TLD/verify?token=$TOKEN**. In case the teacher token isn't *null* and valid the teacher is instantly verified and marked as teacher.
        400:
          description: Returns *USER_ALREADY_REGISTERED* as error string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        503:
          description: Returns *DATABASE_ERROR* as error string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      tags:
        - user
      summary: Set user info
      operationId: set_user
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
        - name: X-ServiceToken
          in: header
          required: true
          schema:
            type: string
      security:
        - JWT: [write]
        - ServiceToken: [write]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        200:
          description: Ok

        400:
          description: Returns *INVALID_SESSION* as error string
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        401:
          description: Returns *INVALID_PERMISSION* as error string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        503:
          description: Returns *DATABASE_ERROR* as error string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /user/{user_guid}:
    get:
      tags:
        - user
      summary: Gets user info.
      operationId: get_user
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
        - name: X-ServiceToken
          in: header
          required: true
          schema:
            type: string
        - name: user_guid
          in: path
          required: true
          schema:
            type: string
      security:
        - JWT: [read]
        - ServiceToken: [write]
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Returns *INVALID_SESSION* as error string
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        401:
          description: Returns *INVALID_PERMISSION* as error string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        503:
          description: Returns *DATABASE_ERROR* as error string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /user/{user_guid}/ban:
    post:
      tags:
        - user
      summary: Bans an User
      operationId: ban_user
      security:
        - ServiceToken: [write]
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
        - name: X-ServiceToken
          in: header
          required: true
          schema:
            type: string
        - name: user_guid
          in: path
          required: true
          schema:
            type: string

      responses:
        '200':
          description: Ok

        '400':
          description: User Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /user/verify:
    patch:
      tags:
        - user
      security:
        - ServiceToken: [read, write]
      summary: Verifies an email token
      parameters:
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
      operationId: verify
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  session:
                    type: string
        401:
          description: Returns *INVALID_TOKEN* as error string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        503:
          description: Returns *DATABASE_ERROR* as error string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /user/session:
    post:
      tags:
        - user
      summary: Checks whether a session jwt token is valid or not
      operationId: session
      security:
        - JWT: [read]
        - ServiceToken: [read, write]
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
        - name: X-ServiceToken
          in: header
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                session:
                  type: string
      responses:
        200:
          description: Ok
        401:
          description: Returns *INVALID_SESSION* as error string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        503:
          description: Returns *DATABASE_ERROR* as error string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /user/login:
    post:
      tags:
        - user
      security:
        - ServiceToken: [read, write]
      parameters:
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
      summary: Used to login a user
      description: Returns jwt session
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        200:
          description: Oka
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        400:
          description: Returns *INVALID_LOGIN* as error string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        503:
          description: Returns *DATABASE_ERROR* as error string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  securitySchemes:
    JWT:
      type: http
      scheme: bearer
    ServiceToken:
      type: http
      scheme: bearer
      bearerFormat: randomstring
  responses:
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    MethodNotAllowed:
      description: Method not allowed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotAcceptable:
      description: Not acceptable
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    RequestTimeout:
      description: Request timeout
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Conflict:
      description: Conflict
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Gone:
      description: Gone
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    LengthRequiered:
      description: Length requiered
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    PreconditionFailed:
      description: Precondition failed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    PayloadTooLarge:
      description: Payload too large
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    RequestURITooLong:
      description: Request-URI too long
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    RequestRangeNotSatisfiable:
      description: Request range not satisfiable
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    ExpectationFailed:
      description: Expectation failed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    UnprocessableEntity:
      description: Unprocessable entity
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Locked:
      description: Locked
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    TooManyRequests:
      description: Too many requests
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NoResponse:
      description: No response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotImplemented:
      description: Not implemented
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    BadGateway:
      description: BadGateway
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    ServiceUnavailable:
      description: Service unavailable
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Insufficient Storage:
      description: Insufficient Storage
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    LoopDetected:
      description: Loop detected
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    BandwidthLimitExceeded:
      description: Bandwidth limit exceeded
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotExtended:
      description: Not extended
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NetworkAuthenticationRequired:
      description: Network authentication required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NetworkConnectTimeoutError:
      description: Network connect timeout error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  schemas:
    User:
      type: object
      properties:
        first_name:
          type: string
          example: Hans-Peter
        last_name:
          type: string
          example: Lustig
        created_at:
          type: string
          description: Time when the user created the Account.
          example: 2020-03-22T20:26:47.367+0000
        email:
          type: string
          example: hans.peter.lustig@gmail.com
        role:
          type: integer
          description:
            User is 0,
            Teacher is 1,
            Admin is 2,
            priviliged_student is 3
          example: 0
        status:
          type: integer
          description:
            Unverified is 0,
            Verified is 1,
            Reported is 2,
            Banned is 3
          example: 1
    Error:
      type: object
      properties:
        error:
          type: string
